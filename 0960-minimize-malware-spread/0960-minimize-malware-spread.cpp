class Solution {
public:
class DSU{
    public:
        vector<int>parent,size;
        DSU(int n){
            parent.resize(n);
            for(int i =0;i<n;++i)parent[i]=i;
            size.resize(n,1);
        }

        // find parnet
        int findUParent(int u){
            if(parent[u]==u)return u;
            return parent[u]=findUParent(parent[u]);
        }
        // uniion by size
        void UnionBySize(int u,int v){
            int ulp_u = findUParent(u);
            int ulp_v = findUParent(v);
            if(ulp_v == ulp_u)return ;
            if(size[ulp_u]<size[ulp_v]){
                parent[ulp_u]=ulp_v;
                size[ulp_v]+=size[ulp_u];
            }else{
                parent[ulp_v]=ulp_u;
                size[ulp_u]+=size[ulp_v];
            }
        }
};
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU ds(n+1);
        // Connect the nodes
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                if(i != j && graph[i][j] == 1) {
                    ds.UnionBySize(i, j);
                }
            }
        }
        // Sort the initial list
        sort(initial.begin(), initial.end());
        
        // Count how many initial nodes infect each component
        unordered_map<int, int> infectedCount;
        
        for(int virusNode : initial) {
            int root = ds.findUParent(virusNode);
            infectedCount[root]++;
        }
        
        // Now find the node whose removal minimizes the malware spread
        int result = initial[0];
        int maxSaved = 0;
        
        for(int virusNode : initial) {
            int root = ds.findUParent(virusNode);
            if(infectedCount[root] == 1) { // Only one infected node in this component
                int saved = ds.size[root];
                if(saved > maxSaved) {
                    maxSaved = saved;
                    result = virusNode;
                }
            }
        }
        
        return result;
    }
};